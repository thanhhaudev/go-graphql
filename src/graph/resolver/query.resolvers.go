package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"strconv"

	"github.com/thanhhaudev/go-graphql/src/graph/generated"
	"github.com/thanhhaudev/go-graphql/src/graph/model"
)

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	books, err := r.bookService.FindAll(ctx)
	if err != nil {
		return nil, err
	}

	return books, nil
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
	res, err := r.authorService.FindAll(ctx)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// Borrowers is the resolver for the borrowers field.
func (r *queryResolver) Borrowers(ctx context.Context) ([]*model.Borrower, error) {
	borrowers, err := r.borrowerService.FindAll(ctx)
	if err != nil {
		return nil, err
	}

	return borrowers, nil
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*model.Book, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	res, err := r.bookService.FindByID(ctx, intID)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(ctx context.Context, id string) (*model.Author, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	res, err := r.authorService.FindByID(ctx, intID)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// Borrower is the resolver for the borrower field.
func (r *queryResolver) Borrower(ctx context.Context, id string) (*model.Borrower, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	res, err := r.borrowerService.FindByID(ctx, intID)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
